{"version":3,"file":"static/js/TestRegistrar.ad03e9ac-dbdde.chunk.js","mappings":"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","sources":["graphql/localQueries.js","routes/TestRegistrar.js","../node_modules/@apollo/src/react/components/Mutation.tsx","../node_modules/@apollo/src/react/components/Query.tsx","../node_modules/@apollo/src/react/data/MutationData.ts","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { gql } from '@apollo/client'\n\nexport const GET_WEB3 = gql`\n  query getweb3 @client {\n    accounts\n    isReadOnly\n  }\n`\n","import React, { Fragment, Component } from 'react'\nimport { Query, Mutation } from '@apollo/client/react/components'\nimport { gql } from '@apollo/client'\nimport { GET_WEB3 } from '../graphql/localQueries'\n\nconst GET_PENDING_TRANSACTIONS = gql`\n  query getPendingTransations {\n    pendingTransactions @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst GET_TRANSACTION_HISTORY = gql`\n  query getTransactionHistory {\n    transactionHistory @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst REGISTER_DOMAIN = gql`\n  mutation registerTestDomain($name: String!) {\n    registerTestDomain(name: $name) @client {\n      id\n    }\n  }\n`\n\nconst RegisterSubdomain = ({ setTx }) => {\n  let input\n\n  return (\n    <Mutation mutation={REGISTER_DOMAIN}>\n      {registerTestDomain => (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault()\n              registerTestDomain({ variables: { name: input.value } }).then(\n                txId => {\n                  console.log(txId)\n                }\n              )\n              input.value = ''\n            }}\n          >\n            <input\n              ref={node => {\n                input = node\n              }}\n            />\n            <button type=\"submit\">Register subdomain</button>\n          </form>\n        </div>\n      )}\n    </Mutation>\n  )\n}\n\nclass TestRegistrar extends Component {\n  state = {\n    started: false\n  }\n  render() {\n    return (\n      <Fragment>\n        <Query query={GET_WEB3} pollInterval={500}>\n          {({ loading, error, data }) => {\n            if (loading) return <div>Loading web3</div>\n            const { web3, people } = data\n            console.log(data)\n            return (\n              <Fragment>\n                <div>\n                  {web3.accounts.length > 0\n                    ? `Your ETH address is ${web3.accounts[0]}`\n                    : 'Unlock metamask!'}\n                </div>\n                <div>{console.log(people)}</div>\n                <RegisterSubdomain />\n              </Fragment>\n            )\n          }}\n        </Query>\n        <Query query={GET_PENDING_TRANSACTIONS}>\n          {({ data, loading }) => {\n            const { pendingTransactions } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Pending Transactions</h2>\n                {pendingTransactions.map(tx => (\n                  <li tx={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n        <Query query={GET_TRANSACTION_HISTORY}>\n          {({ data, loading }) => {\n            const { transactionHistory } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Transaction History</h2>\n                {transactionHistory.map(tx => (\n                  <li key={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default TestRegistrar\n","import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { MutationComponentOptions } from './types';\nimport { useMutation } from '../hooks';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n","import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n"],"names":["GET_WEB3","gql","GET_PENDING_TRANSACTIONS","GET_TRANSACTION_HISTORY","REGISTER_DOMAIN","RegisterSubdomain","input","setTx","Mutation","mutation","registerTestDomain","onSubmit","e","preventDefault","variables","name","value","then","txId","console","log","ref","node","type","TestRegistrar","state","started","Fragment","Query","query","pollInterval","loading","data","error","web3","people","accounts","length","pendingTransactions","map","tx","id","href","transactionHistory","Component","props","useMutation","runMutation","result","children","propTypes","PropTypes","optimisticResponse","refetchQueries","awaitRefetchQueries","update","onCompleted","onError","fetchPolicy","options","useQuery","client","notifyOnNetworkStatusChange","ssr","partialRefetch","returnPartialData","_a","context","setResult","_super","_this","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","getOptions","onMutationError","undefined","errors","verifyDocumentType","DocumentType","mostRecentMutationId","__extends","MutationData","this","isMounted","refreshClient","unmount","bind","mergeOptions","ignoreResults","updateResult","called","ApolloError","graphQLErrors","isMostRecentMutation","previousResult","equal","OperationData","useContext","getApolloContext","useState","updatedOptions","__assign","mutationDataRef","useRef","mutationData","current","setOptions","useEffect","afterExecute","execute"],"sourceRoot":""}